import numpy as np
import os
import shutil

def at_disp(str_file):
    with open(str_file, 'r') as data:
        fl = data.readlines()
        
        scale_factor = float(fl[1])
        lattice_vectors = scale_factor*np.array([list(map(float, i.split())) for i in fl[2:5]])
        
        Coord_mat = np.array([list(map(float, fl[8:][i].split())) for i in range(len(fl[8:]))]).T
        
        elements = list(fl[5].split())
        
        ele = input("Enter the element of interest for displacement\n")
        axis = input("Enter the axis along which you want to displace the atom(s)\n")
        
        def element_pos(ele):
            n = elements.index(ele)
    
            s = 0
            l = [0]
            for num in list(map(int, fl[6].split())):
                s = s + num
                l = l+[s]

            start = l[n]
            stop = l[n+1]
            return list(range(start, stop, 1))
        
        if axis == "X" or axis == "x":
            c = 0
        elif axis == "Y" or axis == "y":
            c = 1
        elif axis == "Z" or axis == "z":
            c = 2
        else:
            print("Type error")
        for disp in [-0.06, -0.05, -0.04, -0.03, -0.02, -0.01, 0.00, 
                     +0.01, +0.02, +0.03, +0.04, +0.05, +0.06]:
            new_Coord_mat = Coord_mat.copy()
            for p in element_pos(ele):
                new_Coord_mat[c][p] = new_Coord_mat[c][p] + disp
            new_Coord = new_Coord_mat.T
            # print(new_Coord)

                
                

            with open('POSCAR_'+str(disp), 'w') as output:
                output.write("generated by sampad's python code" +'\n')
                output.write("1.0" + '\n')
            
                for lv in lattice_vectors:
                    output.write('\t'+"{:.16f}".format(lv[0])+'\t'+"{:.16f}".format(lv[1])+
                                    '\t'+"{:.16f}".format(lv[2])+'\n')
                
                output.writelines(fl[5:8])
                for nc in new_Coord:
                    output.write('\t'+"{:.16f}".format(nc[0])+'\t'+"{:.16f}".format(nc[1])+
                                 '\t'+"{:.16f}".format(nc[2])+'\n')


                os.mkdir('ad_'+str(disp))
                shutil.copy('INCAR', 'ad_'+str(disp))
                shutil.copy('KPOINTS', 'ad_'+str(disp))
                shutil.copy('POTCAR', 'ad_'+str(disp))
                shutil.move('POSCAR_'+str(disp), 'ad_'+str(disp)+"/POSCAR")
            

structure_file = input("Enter the structure file in POSCAR format with cartesian coordinates\n")               
at_disp(structure_file)
